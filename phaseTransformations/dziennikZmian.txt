=18.11.2022=
-Dodano mo¿liwoœæ uruchamiania modelu z argumentami przes³anymi poprzez terminal. Argumenty s¹ przyjmowane w kolejnoœci a1,a2,a3,...,a31,a32, b1,b2,b3,b4, c0,cAlpha,cGammaAlpha0,cGammaAlpha1,cGammaBeta0,cGammaBeta1. Mo¿na wys³aæ mniejsz¹ liczbê argumentów, i wtedy tylko one zostan¹ przypisane do zmiennych, jednak aby przypisaæ wartoœci ,,wspó³czynnikom a" trzeba wys³aæ wszystkie 32 wartoœci, oraz aby przypisaæ wartoœci ,,wspó³czynnikom b" trzeba wys³aæ wszystkie 4 wartoœci. Nie mo¿na zmieniaæ kolejnoœci wysy³anych argumentów. Je¿eli program nie dostanie dostatecznej iloœci argumentów, bêdzie dzia³a³ tak jak wczeœniej (przypisuj¹c wspó³czynnikom wartoœci zapisane w funkcji main). Przyjmowane wartoœci nie s¹ walidowane: program zak³ada, ¿e otrzymuje liczby.



=29.01.2023=
-Dodano nowy konstruktor dla klasy HistogramRhoAndD, dziêki któremu mo¿liwe jest ustalenie wielkoœci ziarna (a tak¿e gêstoœæ dyslokacji) z poziomu main'a

-Poprawiono klasê TemperatureLoader - teraz obliczenia powinny byæ lepsze dla niskich prêdkoœci ch³odzenia. Do konstruktora tej klasy od teraz przesy³a siê tryb (SIMULATION dla symulacji albo OPTIMIZATION dla m.in. identyfikacji wspó³czynników)

-Zmieniono niektóre parametry w kodzie, aby wyniki by³y bli¿sze dostarczonych danych eksperymentalnych



=08.02.2023=
-Dodano nowy konstruktor dla klasy TemperatureLoader przyjmuj¹cy zamiast startowej temperatury wspó³czynniki stali - na ich podstawie temperatura startowa jest ustawiana na trochê wy¿sz¹ ni¿ wartoœæ Ae3

-Dodano wersjê modelu s³u¿¹c¹ WY£¥CZNIE optymalizacji wspó³czynników dotycz¹cych temperatury rozpoczêcia przemiany ferrytycznej - liczy wy³¹cznie wartoœæ tego parametru wyjœciowego, dziêki czemu szybciej koñczy obliczenia



=10.02.2023=
-Dodano nowe wersje modelu s³u¿¹ce do optymalizacji wy³¹cznie okreœlonych parametrów wyjœciowych ; dzia³aj¹ na takiej samej zasadzie jak wersja do optymalizacji temperatury rozpoczêcia przemiany ferrytycznej (08.02.2023), ale dla innych parametrów wyjœciowych



=07.03.2023=
-W nowej klasie StabilityManualTest dodano pó³automatyczny (czêœæ wyników weryfikuje sam, czêœæ wyników musi zweryfikowaæ u¿ytkownik) test do sprawdzania stabilnoœci wyniku z modelu, instrukcja do przeprowadzenia testu znajduje siê w pliku nag³ówkowym klasy



=13.03.2023=
-Lekko zmieniono zachowanie modelu (liczenie temperatur koñca przemian w inny sposób, œrednie u³amki objêtoœci = 0 gdy dana przemiana w wiêkszoœci punktów nie zasz³a)



=24.03.2023=
-Ulepszono pó³automatyczny test do sprawdzania stabilnoœci wyniku z modelu, od teraz wygenerowany skrypt w R tworzy lepsze histogramy, a tak¿e tworzy kolejne histogramy, pokazuj¹ce na jednym wykresie wyniki z wszystkich wywo³añ modelu



=15.05.2023=
-Dodano wczytywanie wyników symulacji z pliku (zajmuje siê tym nowy konstruktor klasy HeatTreatmentResult)

-Zrównoleglono algorytm symuluj¹cy ch³odzenie przy u¿yciu OpenMP, a tak¿e wykonano jego wstêpne profilowanie. Zrównoleglony algorytm jest stosowany w metodzie o nazwie metody, w której wczeœniej stosowany by³ algorytm jednow¹tkowy (stochasticCool()) - dziêki temu nie trzeba nic zmieniaæ w plikach korzystaj¹cych z klasy Cooling (w obecnej paczce .zip z programem ta metoda jest wywo³ywana w plikach sensitivityAnalysis i StabilityManualTest), jednak trzeba na pocz¹tku funkcji main ustaliæ optymaln¹ liczbê w¹tków wywo³uj¹c omp_set_num_threads(). Algorytm jednow¹tkowy jest nadal dostêpny w metodzie stochasticCoolSingleThreaded(). Metody stworzone z myœl¹ o optymalizacji równie¿ dzia³aj¹ teraz wielow¹tkowo, jednow¹tkowe wersje tych metod nadal s¹ dostêpne, zawieraj¹ w nazwie _singleThreaded



=29.05.2023=
-Dodano nowy algorytm symulacji uwzglêdniaj¹cy w ka¿dym kroku czasowym, w ilu punktach Monte Carlo przemiana ju¿ siê rozpoczê³a. Nowy algorytm jest dostêpny w klasie Cooling w metodzie stochasticCool_ALT(). Metoda jest zrównoleglona przy u¿yciu OpenMP, nie zaimplementowano metody jednow¹tkowej, ale bez problemu mo¿na puszczaæ wersjê zrównoleglon¹ na jednym w¹tku (wystarczy ustawiæ w funkcji main omp_set_num_threads(1))



=05.06.2023=
-Dodano nowy sposób tworzenia histogramu, w którym wszystkie wartoœci odstaj¹ce s¹ przerzucane do pojedynczego binu (wartoœci odstaj¹ce po lewej stronie wykresu do binu po lewej stronie, wartoœci odstaj¹ce po prawej stronie wykresu do binu po prawej stronie), teraz jest to domyœlny sposób tworzenia histogramu - poprzedni sposób jest dostêpny przy wys³aniu do konstruktora dodatkowego argumentu histogramType::SIMPLE (mo¿na wysy³aæ ten argument zarówno do konstruktora histogramu, jak i do metody createHistogramsOutOfData klasy HeatTreatmentResult) ; mo¿na wywo³ywaæ domyœln¹ wersjê explicit poprzez wys³anie dodatkowego argumentu histogramType::CARE_ABOUT_OUTLIERS

-W strukturze histogram dodano nowy wektor lowerBinsBoundaries zawieraj¹cy lewe granice poszczególnych binów, minValue okreœla teraz najmniejsz¹ wartoœæ bior¹c¹ udzia³ przy budowie histogramu, a nie lew¹ granicê pierwszego binu (czasami s¹ to te same wartoœci, ale bêdzie tak rzadko), ta ostatnia jest zapisana w lowerBinsBoundaries[0]

-Dodano nowy sposób tworzenia histogramu, w którym granice binów s¹ brane z histogramu przes³anego w konstruktorze ; mo¿na wywo³aæ metodê createHistogramsOutOfData klasy HeatTreatmentResult wysy³aj¹c jako argument inny obiekt HeatTreatmentResult, wtedy granice binów zostan¹ wziête z histogramów odpowiednich parametrów wynikowych wys³anego HeatTreatmentResult

-W module sensitivityAnalysis oraz w klasie StabilityManualTest zmieniono wczeœniejsze tworzenie histogramów na tworzenie ich sposobem, w którym granice binów s¹ brane z histogramów referencyjnych - dziêki temu obliczane tam odleg³oœci miêdzy histogramami bêd¹ lepsze, bo przedzia³y histogramów nie bêd¹ ulegaæ zmianie